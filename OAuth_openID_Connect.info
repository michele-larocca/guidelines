##################################################################
#####   Identity Server Configuration  ######
##################################################################

### To See all URL openid-configuration 
https://<identity-server>/.well-known/openid-configuration

### For WSO2 - OpenID Connect Discovery
https://<identity-server>/oauth2/oidcdiscovery/.well-known/openid-configuration

### Key field of a request token response "oauth2/token"
access_token: opaque token used to access to the resource by API
id_token: (long) JWT Token
refresh_token: (short) opaque token used for refresh the token


######################################################
#####   	Authorization Code Grant Type  		######
######################################################

1) Send Authorization Request for grant type = Authorization code
	ENDPOINT (authorization_endpoint)   => https://accounts.google.com/o/oauth2/v2/auth
	HTTP TYPE  => GET
	Params: 
		response_type=code, client_id, scope=openid profile email,
		state=<code-to-use-to-match-on-return-response>, 
		redirect_uri=http://localhost:8080, 
		access_type=offline, 
		prompt=consent

	access_type=offline --> paramenter means to get Refresh token
	prompt=consent --> paramenter means Users have to explicitly approve the authorize request 
						after entering credentials.
	
	Return a "CODE" to use in the next API

2) Send a Token Request 
	ENDPOINT (token_endpoint)   => https://oauth2.googleapis.com/token
	HTTP TYPE  => POST
	Params: grant_type=authorization_code, 
		client_id, client_secret, 
		code=<CODE-PREVIOUS-API>, 
		redirect_uri=http://localhost:8080, 
		
	Return the token and extract "access_token" to use for te next API and the "refresh_token" to refresh token API.
	After 1 hour the token will be invalid
	
3) Call a API Request with a Bearer Token valued with the access_token

4) Construct a Token Refresh Request 
	ENDPOINT (token_endpoint)  => https://oauth2.googleapis.com/token
	HTTP TYPE  => POST
	Params: grant_type=refresh_token, 
		client_id, client_secret,
		refresh_token=<REFRESH-TOKEN-CODE-PREVIOUS-TOKEN-API>

		Return the token and extract "access_token" to use for te next API.


##############################################################
#####   	Authorization Code Grant Type with PKCE  	######
##############################################################
# PKCE: Proof Key of Code Exchange

Generate a Code challenge by input a code_verifier (for each request)
code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))

example (https://tonyxu-io.github.io/pkce-generator/): 
	code_verifier: this is a code verifier example
	code_challenge: Dnb-LKiZY0h_pvX31yzIYjPsuuC0ZmMFB4GlL3KqknY


1) Send Authorization Request for grant type = Authorization code
	ENDPOINT (authorization_endpoint)   => https://accounts.google.com/o/oauth2/v2/auth
	HTTP TYPE  => GET
	Params: 
		response_type=code, client_id, scope=openid profile email,
		state=<code-to-use-to-match-on-return-response>,
		code_challenge=Dnb-LKiZY0h_pvX31yzIYjPsuuC0ZmMFB4GlL3KqknY
		code_challenge_method=S256

	Return a "CODE" to use in the next API
	
	
2) Send a Token Request 
	ENDPOINT (token_endpoint)   => https://oauth2.googleapis.com/token
	HTTP TYPE  => POST
	Params: grant_type=authorization_code, 
		client_id, client_secret, 
		code=<CODE-PREVIOUS-API>, 
		redirect_uri=http://localhost:8080, 
		code_verifier=this is a code verifier example
		
	Return the token and extract "access_token" to use for te next API.
	
3) Call a API Request with a Bearer Token valued with the access_token



############################################################################
#######    	Client Credentials Grant Type - Machine to Machine    	########
############################################################################

The scope 'openid' is not supported for Client Credentials grant type because in this case there is no Resource Owner.
Openid is used when you want to access attributes of the Resource Owner.

1) Send a Token Request 
	ENDPOINT (token_endpoint)   => https://oauth2.googleapis.com/token
	HTTP TYPE  => POST
	Params: grant_type=client_credentials, 
		scope=<custom_scope_like_read_or_write>,
		client_id, client_secret
	
	Return the token and extract "access_token" to use for te next API
	The "access_token" is also an JWT token.
	
2) Call a API Request with a Bearer Token valued with the access_token



#################################################################
#######    Resource Owner Password Credentials grant     ########
#################################################################

There is a possibility to use PKCE instead of a client secret. 
A one-time key is generated by the client and sent with each request.

1) Send a Token Request 
	ENDPOINT (token_endpoint)   => https://oauth2.googleapis.com/token
	HTTP TYPE  => POST
	Params: grant_type=password, 
		scope=openid profile email <custom_scope_like_read_or_write_resource>,
		client_id, client_secret=(NOT NEEDED IF USE A PKCE)
		username, password
	
	Return the token and extract "access_token" to use for te next API
	The "access_token" is also an JWT token.
	
2) Call a API Request with a Bearer Token valued with the access_token


##################################################
#######    WSO2 Links & Configuration     ########
##################################################

• OpenID Connect Discovery URL
	GET: https://<identity-server>/oauth2/oidcdiscovery/.well-known/openid-configuration

• Introspect URL (to see wether the token is active and his scopes)
	POST: https://<identity-server>/oauth2/introspect
	Parameters: client_id, client_secret, token
	
• User Info URL
	POST: https://<identity-server>/oauth2/userinfo
	Header: Autorization with bearer token
	
	
OAUTH2 Server Side
• Key used by Spring Boot to validate the JWT (jwks_uri). 
	spring.security.oauth2.resourceserver.jwt.kwk-set-uri:
	https://<identity-server>/oauth2/jwks
	
	
OAUTH2 Client Side	
• Client registration used by spring boot to retrieve token
	spring.security.oauth2.client.registration.wso2.client-id:				gVWBVK0pdX4pg2Yk3fFbBjKe1aUa
	spring.security.oauth2.client.registration.wso2.client-secret:				CbfGJXhTYvb3i1BAfu5ijgUSXXYa
	spring.security.oauth2.client.registration.wso2.authorization-grant-type:	password
	spring.security.oauth2.client.registration.wso2.scope:						openid

• Client URI used by spring boot to retrieve token
	spring.security.oauth2.client.provider.wso2.token-uri:
	https://<identity-server>/oauth2/token

	

Example OVH DEV DSOTP - OpenID Connect Discovery: 
	https://identity-server.dev.dsotp.ovh.st:10030/oauth2/oidcdiscovery/.well-known/openid-configuration